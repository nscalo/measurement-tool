from .apimanage import create_app
from datetime import datetime, timedelta
import math
import sqlite3
import json
from flask import make_response, request
import pandas as pd
import sys
from .utils import *
from json2table import convert

app = create_app()

def database_connection():
    db = sqlite3.connect('db/database.db')
    return db

def generate_benchmark_response():
    dataURLArray = request.get_data()
    log_file1, log_file2, log_file3, log_file4, log_file5 = dataURLArray['log_file1'], dataURLArray['log_file2'], dataURLArray['log_file3'], dataURLArray['log_file4'], dataURLArray['log_file5']
    rows1 = convert_perf_time(log_file1.read())
    rows2 = convert_perf_time(log_file2.read())
    rows3 = convert_perf_time(log_file3.read())
    rows4 = convert_perf_time(log_file4.read())
    rows5 = convert_perf_time(log_file5.read())
    return rows1, rows2, rows3, rows4, rows5

def generate_accuracy_response():
    dataURLArray = request.get_data()
    log_file1, log_file2, log_file3, log_file4, log_file5 = dataURLArray['log_file1'], dataURLArray['log_file2'], dataURLArray['log_file3'], dataURLArray['log_file4'], dataURLArray['log_file5']
    ows1 = convert_accuracy_time(log_file1.read())
    rows2 = convert_accuracy_time(log_file2.read())
    rows3 = convert_accuracy_time(log_file3.read())
    rows4 = convert_accuracy_time(log_file4.read())
    rows5 = convert_accuracy_time(log_file5.read())
    return rows1, rows2, rows3, rows4, rows5

def generate_box_predictions_response():
    dataURLArray = request.get_data()
    log_file1, log_file2, log_file3, log_file4, log_file5 = dataURLArray['log_file1'], dataURLArray['log_file2'], dataURLArray['log_file3'], dataURLArray['log_file4'], dataURLArray['log_file5']
    ows1 = convert_box_predictions_time(log_file1.read())
    rows2 = convert_box_predictions_time(log_file2.read())
    rows3 = convert_box_predictions_time(log_file3.read())
    rows4 = convert_box_predictions_time(log_file4.read())
    rows5 = convert_box_predictions_time(log_file5.read())
    return rows1, rows2, rows3, rows4, rows5
    
@app.route('/benchmark/all')
def benchmark():
    rows1, rows2, rows3, rows4, rows5 = generate_benchmark_response()
    response = make_response(enc.encode([rows1, rows2, rows3, rows4, rows5]))
    response.headers['Content-Type'] = 'application/json'
    return response

@app.route('/benchmark/all/html')
def benchmark_html():
    rows1, rows2, rows3, rows4, rows5 = generate_benchmark_response()
    build_direction = "LEFT_TO_RIGHT"
    table_attributes = {"style" : "width:100%"}
    data['table'] = convert([rows1, rows2, rows3, rows4, rows5], 
    build_direction=build_direction, table_attributes=table_attributes)
    data['content'] = "Generated by ® Measurement Tool for Hackathon"
    data['fields'] = ""
    data['message'] = "Showing benchmark"
    data['header'] = "Requirements Tool"
    return render_template('templates/base.html', data)

@app.route('/accuracy/all')
def accuracy():
    rows1, rows2, rows3, rows4, rows5 = generate_accuracy_response()
    response = make_response(enc.encode([rows1, rows2, rows3, rows4, rows5]))
    response.headers['Content-Type'] = 'application/json'
    return response

@app.route('/accuracy/all/html')
def accuracy():
    rows1, rows2, rows3, rows4, rows5 = generate_accuracy_response()
    build_direction = "LEFT_TO_RIGHT"
    table_attributes = {"style" : "width:100%"}
    data['table'] = convert([rows1, rows2, rows3, rows4, rows5], 
    build_direction=build_direction, table_attributes=table_attributes)
    data['content'] = "Generated by ® Measurement Tool for Hackathon"
    data['fields'] = ""
    data['message'] = "Showing accuracy"
    data['header'] = "Requirements Tool"
    return render_template('templates/base.html', data)

@app.route('/box_predictions/all')
def box_predictions():
    rows1, rows2, rows3, rows4, rows5 = generate_accuracy_response()
    response = make_response(enc.encode([rows1, rows2, rows3, rows4, rows5]))
    response.headers['Content-Type'] = 'application/json'
    return response

@app.route('/box_predictions/all/html')
def box_predictions():
    rows1, rows2, rows3, rows4, rows5 = generate_accuracy_response()
    build_direction = "LEFT_TO_RIGHT"
    table_attributes = {"style" : "width:100%"}
    data['table'] = convert([rows1, rows2, rows3, rows4, rows5], 
    build_direction=build_direction, table_attributes=table_attributes)
    data['content'] = "Generated by ® Measurement Tool for Hackathon"
    data['fields'] = ""
    data['message'] = "Showing box predictions"
    data['header'] = "Requirements Tool"
    return render_template('templates/base.html', data)